/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ee.sammee;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Line2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Mappazzo
 * 
 */
public class SammeeUI extends javax.swing.JFrame {
    
    private Path paramFile;
    private boolean paramRead = false;
    private Path setupFile;
    private boolean setupRead = false;
    private Path rainFile;
    private boolean rainRead = false;
    private Path outputFile;
    private boolean outputOpen = false;
    private boolean runStatus = false;
    private final Color goodColor = new Color(0,145,56);
    private final Color badColor = new Color(145,20,0);
    private final Color pendingColor = new Color(225,102,0);
    
    private double maxY = 0;
    private double minY = 0;
    private double minX = 0;
    private double maxX = 0;
    private int noCells = 0;
    private int frameDelay = 50;
    private int noTimesteps = 0;
    private int timeStep = 0;
    private int runCount = 0;
    private double[] xPlot = new double[1000];
    private double[] cellPlot = new double[1000];
    private double[] impPlot = new double[1000];
    private double[] surfPlot = new double[1000];
    private double[] waterPlot = new double[1000];
    private double[] maxWaterPlot = new double[1000];
    private double[] boundsPlot = new double[2];
    private float[] modelResult = new float[8];
    private int animateTS = 0;
    private boolean animateRun = false;
    private boolean drawCells = false;
    private boolean lineSurf = true;
    private Timer animateTimer;    
    
    private SimpleDateFormat dateStore = new SimpleDateFormat("yyyy.MM.dd");
    SAMmodel modelA = new SAMmodel();
    private PrintWriter writeParaFile;
    private boolean paraOutputOpen;
    
    SammeeLicense lic = new SammeeLicense();
    private int licenseNumber;
    private String licenseType;
    private int currentVersion;
    
    /**
     * Creates new form SammeeUI
     */
    public SammeeUI() {
        initComponents();
        iniAnimate();
        RunCheckVersion();
        RunCheckLicense();
        setTitle("SammEE-1D v." + currentVersion + "; " + licenseType + " License, #" + licenseNumber);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paramSetup = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        setupLabel = new javax.swing.JLabel();
        rainLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        findSetup = new javax.swing.JButton();
        findRainfall = new javax.swing.JButton();
        findOutput = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        saveParamSetup = new javax.swing.JButton();
        cancelParamSetup = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        paramLabel = new javax.swing.JLabel();
        setTimeStep = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        setNoTimesteps = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        setBoundConst1 = new javax.swing.JFormattedTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        setBoundConst2 = new javax.swing.JFormattedTextField();
        jLabel39 = new javax.swing.JLabel();
        setConstSY = new javax.swing.JFormattedTextField();
        jLabel40 = new javax.swing.JLabel();
        setConstK = new javax.swing.JFormattedTextField();
        jLabel41 = new javax.swing.JLabel();
        setConstIL = new javax.swing.JFormattedTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        setConstPL = new javax.swing.JFormattedTextField();
        jLabel44 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        inpOutCheck = new javax.swing.JCheckBox();
        tsOutCheck = new javax.swing.JCheckBox();
        runOnSaveCheck = new javax.swing.JCheckBox();
        fileChooser_sPARA = new javax.swing.JFileChooser();
        fileChooser_sSETUP = new javax.swing.JFileChooser();
        fileChooser_sRAIN = new javax.swing.JFileChooser();
        fileChooser_sOUT = new javax.swing.JFileChooser();
        fileSave_sPARA = new javax.swing.JFileChooser();
        UserLicense = new javax.swing.JDialog();
        jLabel45 = new javax.swing.JLabel();
        licenseError = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        agreeCheckBox = new javax.swing.JCheckBox();
        emailInputBox = new javax.swing.JTextField();
        GetLicense = new javax.swing.JButton();
        DeclineLicense = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        licenseInputBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        Animation_Panel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        speed = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        showTimeLabel = new javax.swing.JLabel();
        TsSlider = new javax.swing.JSlider();
        jLabel25 = new javax.swing.JLabel();
        currentTsLabel = new javax.swing.JLabel();
        TsRainfall = new javax.swing.JLabel();
        cellsON = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        TsFlux = new javax.swing.JLabel();
        surfType = new javax.swing.JCheckBox();
        Result_Panel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalRain = new javax.swing.JLabel();
        totalRunoff = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        totalFL = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        totalFR = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        surfDrain = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        waterBalance = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        totalIL = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        changeStorage = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        cellsLabel = new javax.swing.JLabel();
        TsLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        RsLabel = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        mDuration = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        rDuration = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        detailOutCheck = new javax.swing.JCheckBox();
        summOutCheck = new javax.swing.JCheckBox();
        periodOutCheck = new javax.swing.JCheckBox();
        exportButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        minWaterDepth = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        runStatusLabel = new javax.swing.JLabel();
        panel1 = new chartPanel();

        paramSetup.setTitle("Model Run Setup");
        paramSetup.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/ee/sammee/puzzle piece dark green rgb_75high.png")));
        paramSetup.setLocationByPlatform(true);
        paramSetup.setMinimumSize(new java.awt.Dimension(550, 450));
        paramSetup.setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Model setup file:");

        jLabel13.setText("Rainfall data file:");

        setupLabel.setForeground(new java.awt.Color(51, 51, 255));
        setupLabel.setText("-----");

        rainLabel.setForeground(new java.awt.Color(51, 51, 255));
        rainLabel.setText("-----");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Input Files");

        outputLabel.setForeground(new java.awt.Color(51, 51, 255));
        outputLabel.setText("-----");

        findSetup.setText("load");
        findSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findSetupActionPerformed(evt);
            }
        });

        findRainfall.setText("load");
        findRainfall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findRainfallActionPerformed(evt);
            }
        });

        findOutput.setText("set");
        findOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findOutputActionPerformed(evt);
            }
        });

        jLabel17.setText("Output file:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel4)
                            .addComponent(jLabel17))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setupLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addComponent(findSetup, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(findRainfall, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(findOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(findSetup)
                    .addComponent(setupLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(rainLabel)
                    .addComponent(findRainfall))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findOutput)
                    .addComponent(jLabel17)
                    .addComponent(outputLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveParamSetup.setText("Save / Run");
        saveParamSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveParamSetupActionPerformed(evt);
            }
        });

        cancelParamSetup.setText("Cancel");
        cancelParamSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelParamSetupActionPerformed(evt);
            }
        });

        jLabel9.setText("Parameter file:");

        paramLabel.setForeground(new java.awt.Color(0, 0, 255));
        paramLabel.setText("-----");

        setTimeStep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        setTimeStep.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setTimeStep.setText("60");
        setTimeStep.setToolTipText("");
        setTimeStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTimeStepActionPerformed(evt);
            }
        });

        jLabel2.setText("Time step (min)");

        setNoTimesteps.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        setNoTimesteps.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setNoTimesteps.setText("20");
        setNoTimesteps.setToolTipText("");
        setNoTimesteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setNoTimestepsActionPerformed(evt);
            }
        });

        jLabel14.setText("Number of time steps");

        setBoundConst1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        setBoundConst1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setBoundConst1.setText("2.25");
        setBoundConst1.setToolTipText("");
        setBoundConst1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBoundConst1ActionPerformed(evt);
            }
        });

        jLabel37.setText("Left boundary water level (mAD)");

        jLabel38.setText("Right boundary water level (mAD)");

        setBoundConst2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        setBoundConst2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setBoundConst2.setText("3.25");
        setBoundConst2.setToolTipText("");
        setBoundConst2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBoundConst2ActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel39.setText("Run setup");

        setConstSY.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        setConstSY.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setConstSY.setToolTipText("");
        setConstSY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConstSYActionPerformed(evt);
            }
        });

        jLabel40.setText("Specific Yield (m3/m3)");

        setConstK.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        setConstK.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setConstK.setText("5");
        setConstK.setToolTipText("");
        setConstK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConstKActionPerformed(evt);
            }
        });

        jLabel41.setText("Hydraulic conductivity (m/day)");

        setConstIL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        setConstIL.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setConstIL.setToolTipText("");
        setConstIL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConstILActionPerformed(evt);
            }
        });

        jLabel42.setText("Initial loss (mm/day)");

        jLabel43.setText("Proportional loss (mm/mm)");

        setConstPL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        setConstPL.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setConstPL.setText("0.1");
        setConstPL.setToolTipText("");
        setConstPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConstPLActionPerformed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel44.setText("Default cell properties");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        inpOutCheck.setText("Create input data log");
        inpOutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpOutCheckActionPerformed(evt);
            }
        });

        tsOutCheck.setText("Output timestep results (may create large file)");
        tsOutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tsOutCheckActionPerformed(evt);
            }
        });

        runOnSaveCheck.setSelected(true);
        runOnSaveCheck.setText("Run model");
        runOnSaveCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnSaveCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paramSetupLayout = new javax.swing.GroupLayout(paramSetup.getContentPane());
        paramSetup.getContentPane().setLayout(paramSetupLayout);
        paramSetupLayout.setHorizontalGroup(
            paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paramSetupLayout.createSequentialGroup()
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paramSetupLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelParamSetup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveParamSetup))
                            .addComponent(runOnSaveCheck)
                            .addComponent(inpOutCheck)
                            .addGroup(paramSetupLayout.createSequentialGroup()
                                .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel14))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(setNoTimesteps, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(setTimeStep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addComponent(jLabel37)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(setBoundConst1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addComponent(jLabel38)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(setBoundConst2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel39))
                                .addGap(15, 15, 15)
                                .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel40)
                                                .addComponent(jLabel41))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(setConstK, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(setConstSY, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addComponent(jLabel42)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(setConstIL, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(paramSetupLayout.createSequentialGroup()
                                            .addComponent(jLabel43)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(setConstPL, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel44)))
                            .addComponent(tsOutCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(paramSetupLayout.createSequentialGroup()
                    .addGap(225, 225, 225)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(243, Short.MAX_VALUE)))
        );
        paramSetupLayout.setVerticalGroup(
            paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paramSetupLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setTimeStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setNoTimesteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setBoundConst1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setBoundConst2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paramSetupLayout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setConstSY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setConstK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setConstIL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setConstPL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(runOnSaveCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inpOutCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tsOutCheck)
                .addGap(15, 15, 15)
                .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveParamSetup)
                    .addComponent(cancelParamSetup)
                    .addComponent(jLabel9)
                    .addComponent(paramLabel))
                .addContainerGap())
            .addGroup(paramSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(paramSetupLayout.createSequentialGroup()
                    .addGap(150, 150, 150)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(138, Short.MAX_VALUE)))
        );

        fileChooser_sPARA.setCurrentDirectory(new java.io.File("C:\\sammee-1d"));
        fileChooser_sPARA.setDialogTitle("Choose template");
        fileChooser_sPARA.setFileFilter(new sPARAfilefilter());
        fileChooser_sPARA.setSelectedFile(new java.io.File("C:\\sammee-1d\\samm1d_test.sPara"));

        fileChooser_sSETUP.setCurrentDirectory(new java.io.File("C:\\sammee-1d"));
        fileChooser_sSETUP.setDialogTitle("Choose model setup file");
        fileChooser_sSETUP.setFileFilter(new sSETUPfilefilter());
        fileChooser_sSETUP.setToolTipText("");

        fileChooser_sRAIN.setCurrentDirectory(new java.io.File("C:\\sammee-1d"));
        fileChooser_sRAIN.setDialogTitle("Choose rainfall file");
        fileChooser_sRAIN.setFileFilter(new sRAINfilefilter());

        fileChooser_sOUT.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser_sOUT.setApproveButtonText("Save");
        fileChooser_sOUT.setApproveButtonToolTipText("");
        fileChooser_sOUT.setCurrentDirectory(new java.io.File("C:\\sammee-1d"));
        fileChooser_sOUT.setDialogTitle("Choose output file");
        fileChooser_sOUT.setFileFilter(new sOUTfilefilter());
        fileChooser_sOUT.setToolTipText("");

        fileSave_sPARA.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileSave_sPARA.setApproveButtonText("Save");
        fileSave_sPARA.setApproveButtonToolTipText("");
        fileSave_sPARA.setCurrentDirectory(new java.io.File("C:\\sammee-1d"));
        fileSave_sPARA.setDialogTitle("Save model run (parameter file)");
        fileSave_sPARA.setFileFilter(new sPARAfilefilter());
        fileSave_sPARA.setSelectedFile(new java.io.File("C:\\sammee-1d\\samm1d_test.sPara"));
        fileSave_sPARA.setToolTipText("");

        UserLicense.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        UserLicense.setTitle("User License");
        UserLicense.setMinimumSize(new java.awt.Dimension(530, 470));
        UserLicense.setModal(true);
        UserLicense.setResizable(false);
        UserLicense.setSize(new java.awt.Dimension(530, 470));

        jLabel45.setText("In order to use this software you must activate a valid user license for use on this machine.");

        licenseError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        licenseError.setForeground(new java.awt.Color(255, 0, 0));
        licenseError.setText("A user license could not be found");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setWheelScrollingEnabled(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("SammEE user license agreement; Dec 2013 - conditions of use\nEssential Environmental provide access to this software provided that each user acknowledges limitations and agrees to conditions as follows.\n - A valid user license is required to access the software. Each user license provides one user with access on one personal computer \n - Access is provided to non-commercial users (eg: government employees, students and teachers) free of charge through issue of a FREE user license. Any person or company who may make profit from use of this product is considered a commercial user and is not permitted to hold or obtain a FREE license.\n - A 14-day TRIAL user license will be issued to commercial users for evaluation purposes. A commercial user must obtain a FULL user license prior to engaging in any activities which will draw profit from the explicit use of the software, or indirectly from knowledge that has been obtained through use of the software. \n - A commercial FULL user license is obtained after payment has been confirmed by the license administrator. The license is issued by upgrading an existing TRIAL license to FULL status on the license server. Verification of payment and issue of can take up to 5 working days.\n - Any use of this product for commercial or non-commercial purposes must make clear references to its use by way of citation including reference to the product website. Citation shall be provided as follows, or to the equivalent effect: \n\tEssential Environmental (2013), SammEE - Shallow Aquifer Management Model, \n\tavailable online at www.essentialenvironmental.com.au.\n - Essential Environmental make no representations or warranties about its accuracy, completeness or suitability of this product for any particular purpose. Essential Environmental cannot accept liability of any kind (whether in contract, tort or otherwise) for any expenses, losses, damages and/or costs (including indirect or consequential damage)  which are or may be incurred as a result of the product being inaccurate, incomplete or unsuitable in any way or for any reason.\n - Essential Environmental will maintain records of active and expired user licenses including; email address, user accounts, license details and use statistics. By accepting a license you permit Essential Environmental to hold this information and agree for those records to be used for the purpose of improving the software, providing news and updates for the software, and for general marketing of related products and services.  \n - If you currently or have previously held a user license and wish to be removed from the user database you can do so by emailing the license administrator whose details can be found on the product website. If you are removed from the user database you will no longer be able to access this product.\n - You are NOT permitted to distribute this product within your organisation or to external parties. All new users are required to download the latest version of this product from the product website.\n - Access to this product requires an active internet connection, and access will be suspended after a nominal number of successive failed attempts for the software to access our server.\n - Essential Environmental reserve the right to remove access to this product to any user or user group at any time for any reason (specified or unspecified).  \n - Access to the software is provided via download from the product website. You will not try to copy the product, gain access to source code, reverse engineer or obtain access to the software or its code in any other way.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setCaretPosition(0);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea1.setMinimumSize(new java.awt.Dimension(104, 100));
        jScrollPane1.setViewportView(jTextArea1);

        agreeCheckBox.setText("I agree to the conditions of use");
        agreeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agreeCheckBoxActionPerformed(evt);
            }
        });

        emailInputBox.setText("JoBloggs@gmail.com");
        emailInputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailInputBoxActionPerformed(evt);
            }
        });

        GetLicense.setText("Activate");
        GetLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetLicenseActionPerformed(evt);
            }
        });

        DeclineLicense.setText("Exit");
        DeclineLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineLicenseActionPerformed(evt);
            }
        });

        jLabel48.setText("In order to proceed you need to agree to the conditions of use (above) and activate a valid ");

        jLabel49.setText("Each SammEE license is only valid for one user. If you wish to use an existing license for");

        jLabel50.setText("user license on your machine. To activate your license you need to provide a valid license ");

        jLabel51.setText("number and matching email address. ");

        jLabel52.setText("Please direct all license enquiries to");

        jLabel53.setForeground(new java.awt.Color(0, 0, 255));
        jLabel53.setText("info@essentialenvironmental.com");

        jLabel56.setText("a different user you can appy to have the license re-set.");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50)
                    .addComponent(jLabel48)
                    .addComponent(jLabel49)
                    .addComponent(jLabel51)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel52)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel53))
                    .addComponent(jLabel56))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel48)
                .addGap(0, 0, 0)
                .addComponent(jLabel50)
                .addGap(0, 0, 0)
                .addComponent(jLabel51)
                .addGap(0, 0, 0)
                .addComponent(jLabel49)
                .addGap(0, 0, 0)
                .addComponent(jLabel56)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel53)
                    .addComponent(jLabel52))
                .addContainerGap())
        );

        jLabel54.setText("Registered email:");

        jLabel55.setText("License number:");

        licenseInputBox.setText("12548");
        licenseInputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseInputBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserLicenseLayout = new javax.swing.GroupLayout(UserLicense.getContentPane());
        UserLicense.getContentPane().setLayout(UserLicenseLayout);
        UserLicenseLayout.setHorizontalGroup(
            UserLicenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserLicenseLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(UserLicenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserLicenseLayout.createSequentialGroup()
                        .addComponent(jLabel55)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(licenseInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(201, 201, 201)
                        .addComponent(GetLicense)
                        .addGap(18, 18, 18)
                        .addComponent(DeclineLicense))
                    .addGroup(UserLicenseLayout.createSequentialGroup()
                        .addComponent(jLabel54)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel45)
                    .addComponent(licenseError)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agreeCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UserLicenseLayout.setVerticalGroup(
            UserLicenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserLicenseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(licenseError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agreeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UserLicenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserLicenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(licenseInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55)
                    .addComponent(DeclineLicense)
                    .addComponent(GetLicense))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SammEE-1D v." + currentVersion);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/ee/sammee/puzzle piece dark green rgb_75high.png")));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(0, 400));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel1.setText("shallow aquifer management model");

        loadButton.setText("Set model");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        Animation_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Animation_Panel.setMinimumSize(new java.awt.Dimension(240, 220));
        Animation_Panel.setPreferredSize(new java.awt.Dimension(240, 220));
        Animation_Panel.setRequestFocusEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Chart / Animation");

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedStateChanged(evt);
            }
        });

        jLabel12.setText("Speed");

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Current time (days):");

        showTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        showTimeLabel.setText("---");

        TsSlider.setToolTipText("");
        TsSlider.setValue(0);
        TsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TsSliderStateChanged(evt);
            }
        });

        jLabel25.setText("Time step:");

        currentTsLabel.setText("0");

        TsRainfall.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        TsRainfall.setText("---");

        cellsON.setText("Draw cells");
        cellsON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cellsONActionPerformed(evt);
            }
        });

        jLabel27.setText("Rainfall (mm/hr):");

        jLabel31.setText("Bound discharge (L/min):");

        TsFlux.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        TsFlux.setText("---");

        surfType.setSelected(true);
        surfType.setText("Surf as line");
        surfType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Animation_PanelLayout = new javax.swing.GroupLayout(Animation_Panel);
        Animation_Panel.setLayout(Animation_PanelLayout);
        Animation_PanelLayout.setHorizontalGroup(
            Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Animation_PanelLayout.createSequentialGroup()
                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(goButton)
                                .addGap(6, 6, 6)
                                .addComponent(pauseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton))
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel11))
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(cellsON)
                                .addGap(18, 18, 18)
                                .addComponent(surfType)))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(showTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TsRainfall, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TsFlux, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(Animation_PanelLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentTsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(15, 15, 15))
        );

        Animation_PanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {goButton, pauseButton, resetButton});

        Animation_PanelLayout.setVerticalGroup(
            Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Animation_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31))
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addComponent(showTimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TsRainfall)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TsFlux)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellsON)
                    .addComponent(surfType))
                .addGap(12, 12, 12)
                .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(currentTsLabel))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Animation_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pauseButton)
                            .addComponent(resetButton)
                            .addComponent(goButton)))
                    .addGroup(Animation_PanelLayout.createSequentialGroup()
                        .addComponent(TsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        Result_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Result_Panel.setMinimumSize(new java.awt.Dimension(220, 220));
        Result_Panel.setPreferredSize(new java.awt.Dimension(220, 220));

        jLabel18.setText("Runoff:");

        jLabel8.setText("Rainfall:");

        totalRain.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalRain.setText("-----");

        totalRunoff.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalRunoff.setText("-----");

        jLabel19.setText("GW discharge left:");

        totalFL.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalFL.setText("-----");

        jLabel20.setText("GW discharge right:");

        totalFR.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalFR.setText("-----");

        jLabel24.setText("Surface drainage:");

        surfDrain.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        surfDrain.setText("-----");

        jLabel22.setText("Balance:");

        waterBalance.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        waterBalance.setText("-----");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("Water Balance [L]");

        jLabel26.setText("Inital loss:");

        totalIL.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalIL.setText("-----");

        jLabel28.setText("Change storage:");

        changeStorage.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        changeStorage.setText("-----");

        javax.swing.GroupLayout Result_PanelLayout = new javax.swing.GroupLayout(Result_Panel);
        Result_Panel.setLayout(Result_PanelLayout);
        Result_PanelLayout.setHorizontalGroup(
            Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Result_PanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel28)
                    .addComponent(jLabel24)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18)
                    .addComponent(jLabel26)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalRunoff, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(totalFL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waterBalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(surfDrain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalFR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(changeStorage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalIL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalRain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
            .addGroup(Result_PanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel23)
                .addGap(56, 56, 56))
        );
        Result_PanelLayout.setVerticalGroup(
            Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Result_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(15, 15, 15)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalRain)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(totalIL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalRunoff)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(totalFL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(totalFR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(surfDrain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(changeStorage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(waterBalance))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(220, 220));
        jPanel3.setPreferredSize(new java.awt.Dimension(220, 220));

        jLabel5.setText("Number of cells:");

        jLabel6.setText("Model Step (min):");

        jLabel21.setText("Simulation length (d):");

        cellsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cellsLabel.setText("-----");

        TsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        TsLabel.setText("-----");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("Model setup");

        RsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        RsLabel.setText("-----");

        jLabel34.setText("Rain data TS (min):");

        mDuration.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mDuration.setText("-----");

        jLabel35.setText("Rainfall record (d):");

        rDuration.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        rDuration.setText("-----");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel16)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cellsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(RsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(15, 15, 15))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cellsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RsLabel)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDuration)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(rDuration))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jLabel29.setFont(new java.awt.Font("Calibri", 0, 48)); // NOI18N
        jLabel29.setText("SammEE");
        jLabel29.setToolTipText("");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(220, 220));
        jPanel2.setName(""); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(220, 220));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Results");
        jLabel30.setToolTipText("");
        jLabel30.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        detailOutCheck.setText("Detailed result");
        detailOutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailOutCheckActionPerformed(evt);
            }
        });

        summOutCheck.setSelected(true);
        summOutCheck.setText("Summary result");
        summOutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summOutCheckActionPerformed(evt);
            }
        });

        periodOutCheck.setSelected(true);
        periodOutCheck.setText("Period / Calender result");
        periodOutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodOutCheckActionPerformed(evt);
            }
        });

        exportButton.setText("Export Result");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Min depth GW [mm]:");

        minWaterDepth.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        minWaterDepth.setText("-----");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(minWaterDepth, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(periodOutCheck)
                                .addComponent(detailOutCheck)
                                .addComponent(summOutCheck)
                                .addComponent(exportButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(minWaterDepth))
                .addGap(18, 18, 18)
                .addComponent(summOutCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(periodOutCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailOutCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton)
                .addGap(36, 36, 36))
        );

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ee/sammee/puzzle piece dark green rgb_75high.png"))); // NOI18N

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ee/sammee/SammEE picture_100high.png"))); // NOI18N
        jLabel33.setPreferredSize(new java.awt.Dimension(400, 100));

        jLabel36.setText("by Essential Environmental");

        jLabel10.setText("Model status:");

        runStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        runStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        runStatusLabel.setText("NOT LOADED");

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setMinimumSize(new java.awt.Dimension(940, 175));
        panel1.setPreferredSize(new java.awt.Dimension(940, 175));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 940, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(260, 260, 260)
                        .addComponent(exitButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(Result_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel36))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(Animation_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exitButton, loadButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jLabel1)
                            .addGap(0, 0, 0)
                            .addComponent(jLabel36))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Animation_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Result_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(loadButton)
                    .addComponent(runButton)
                    .addComponent(jLabel10)
                    .addComponent(runStatusLabel))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        exitSammee();
    }//GEN-LAST:event_exitButtonActionPerformed
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if(paramFile != null) {
            fileChooser_sPARA.setCurrentDirectory(paramFile.toFile());
            fileChooser_sPARA.setSelectedFile(paramFile.toFile());
        }
        int returnVal = fileChooser_sPARA.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser_sPARA.getSelectedFile();
            clearSetup();
            setParaFile(Paths.get(file.getAbsolutePath()));
            try {
                readPara();
            } catch (IOException ex) {
                Logger.getLogger(SammeeUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        paramSetup.setVisible(true);
    }//GEN-LAST:event_loadButtonActionPerformed
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        runModel();                
    }//GEN-LAST:event_runButtonActionPerformed
    private void inpOutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpOutCheckActionPerformed
        setOutputParams();
    }//GEN-LAST:event_inpOutCheckActionPerformed
    private void tsOutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tsOutCheckActionPerformed
        setOutputParams();
    }//GEN-LAST:event_tsOutCheckActionPerformed
    private void summOutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summOutCheckActionPerformed
        setOutputParams();
    }//GEN-LAST:event_summOutCheckActionPerformed
    private void detailOutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailOutCheckActionPerformed
        setOutputParams();
    }//GEN-LAST:event_detailOutCheckActionPerformed
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        Path resultOutputFile;
        boolean exportComplete = false;
        
        if(runStatus){
            if(outputFile != null) {
                fileChooser_sOUT.setCurrentDirectory(outputFile.toFile());
                fileChooser_sOUT.setSelectedFile(outputFile.toFile());
            } else if (paramFile != null) {
                fileChooser_sOUT.setCurrentDirectory(paramFile.toFile());
                fileChooser_sOUT.setSelectedFile(null);
            }
            int returnVal = fileChooser_sOUT.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser_sOUT.getSelectedFile();
                resultOutputFile = Paths.get(file.getAbsolutePath());
                exportComplete = modelA.exportResult(resultOutputFile);
                if(!exportComplete) infoBox("Could not open file", "EXPORT FAILED");
            } else {
                System.out.println("File access cancelled by user.");
            }
        } else {
            infoBox("Run model first", "EXPORT FAILED");
        }
    }//GEN-LAST:event_exportButtonActionPerformed
    private void cellsONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cellsONActionPerformed
        drawCells = cellsON.isSelected();
        panel1.repaint();
    }//GEN-LAST:event_cellsONActionPerformed
    private void TsSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TsSliderStateChanged
        if(runStatus){
            //animateTimer.stop();
            animateTS = noTimesteps * TsSlider.getValue() / 100;
            currentTsLabel.setText(String.format("%s",animateTS));
            showTimeLabel.setText(String.format("%s",animateTS*timeStep/60/24));

            getModelResults(animateTS);
            panel1.repaint();
            // animateTimer.start();
        }
    }//GEN-LAST:event_TsSliderStateChanged
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        if(runStatus){
            animateTimer.start();
            animateRun = true;
        }
    }//GEN-LAST:event_goButtonActionPerformed
    private void speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedStateChanged
        frameDelay = 2000 / (speed.getValue()+1);
        animateTimer.stop();
        animateTimer.setDelay(frameDelay);
        animateTimer.start();
    }//GEN-LAST:event_speedStateChanged
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        animateRun = false;
    }//GEN-LAST:event_pauseButtonActionPerformed
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if(runStatus){
            animateTS = 1;
            float TSpercent = animateTS/noTimesteps*100;
            TsSlider.setValue((int)TSpercent);
            currentTsLabel.setText(String.format("%s",animateTS));
            showTimeLabel.setText(String.format("%s",animateTS*timeStep/60/24));
            getModelResults(animateTS);
            panel1.repaint();
        }

    }//GEN-LAST:event_resetButtonActionPerformed
    private void surfTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfTypeActionPerformed
        lineSurf = surfType.isSelected();
        panel1.repaint();
    }//GEN-LAST:event_surfTypeActionPerformed
    private void periodOutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodOutCheckActionPerformed
        setOutputParams();// TODO add your handling code here:
    }//GEN-LAST:event_periodOutCheckActionPerformed
    private void findSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findSetupActionPerformed
        if(setupFile != null) {
            fileChooser_sSETUP.setCurrentDirectory(setupFile.toFile());
            fileChooser_sSETUP.setSelectedFile(setupFile.toFile());
        } else if (paramFile != null) {
            fileChooser_sSETUP.setCurrentDirectory(paramFile.toFile());
            fileChooser_sSETUP.setSelectedFile(null);
        }
        int returnVal = fileChooser_sSETUP.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser_sSETUP.getSelectedFile();
            setupFile = Paths.get(file.getAbsolutePath());
            setupLabel.setText(setupFile.toString());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_findSetupActionPerformed
    private void findRainfallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findRainfallActionPerformed
        if(rainFile != null) {
            fileChooser_sRAIN.setCurrentDirectory(rainFile.toFile());
            fileChooser_sRAIN.setSelectedFile(rainFile.toFile());
        } else if (paramFile != null) {
            fileChooser_sRAIN.setCurrentDirectory(paramFile.toFile());
            fileChooser_sRAIN.setSelectedFile(null);
        }
        int returnVal = fileChooser_sRAIN.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser_sRAIN.getSelectedFile();
            rainFile = Paths.get(file.getAbsolutePath());
            rainLabel.setText(rainFile.toString());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_findRainfallActionPerformed
    private void findOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findOutputActionPerformed
        if(outputFile != null) {
            fileChooser_sOUT.setCurrentDirectory(outputFile.toFile());
            fileChooser_sOUT.setSelectedFile(outputFile.toFile());
        } else if (paramFile != null) {
            fileChooser_sOUT.setCurrentDirectory(paramFile.toFile());
            fileChooser_sOUT.setSelectedFile(null);
        }
        int returnVal = fileChooser_sOUT.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser_sOUT.getSelectedFile();
            outputFile = Paths.get(file.getAbsolutePath());
            outputLabel.setText(outputFile.toString());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_findOutputActionPerformed
    private void cancelParamSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelParamSetupActionPerformed
        paramSetup.setVisible(false);
    }//GEN-LAST:event_cancelParamSetupActionPerformed
    private void setTimeStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTimeStepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setTimeStepActionPerformed
    private void setNoTimestepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setNoTimestepsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setNoTimestepsActionPerformed
    private void setBoundConst1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBoundConst1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setBoundConst1ActionPerformed
    private void setBoundConst2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBoundConst2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setBoundConst2ActionPerformed
    private void setConstSYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConstSYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setConstSYActionPerformed
    private void setConstKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConstKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setConstKActionPerformed
    private void setConstILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConstILActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setConstILActionPerformed
    private void setConstPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConstPLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setConstPLActionPerformed
    private void saveParamSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveParamSetupActionPerformed
        if(paramFile != null) {
            fileSave_sPARA.setCurrentDirectory(paramFile.toFile());
            fileSave_sPARA.setSelectedFile(paramFile.toFile());
        }
        int returnVal = fileSave_sPARA.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileSave_sPARA.getSelectedFile();
            setParaFile(Paths.get(file.getAbsolutePath()));
            savePara();
            readFiles();
            if(runOnSaveCheck.isSelected()) runModel();
            paramSetup.setVisible(false);
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveParamSetupActionPerformed
    private void runOnSaveCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnSaveCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runOnSaveCheckActionPerformed
    private void agreeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agreeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agreeCheckBoxActionPerformed
    private void emailInputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailInputBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailInputBoxActionPerformed

    private void GetLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetLicenseActionPerformed
        String userEmail = emailInputBox.getText();
        String userLicenseNum = licenseInputBox.getText();
        
        if(lic.checkBadEmail(userEmail)) {
            infoBox("The email address you have entered has been identifed \n"
                + "as invalid, if you believe this is incorrect please \n"
                + "contact Essential Environmental", "LICENSE FAILED");
        } else {
            if(agreeCheckBox.isSelected()) {
                String licenseResult = lic.createLicense(userEmail, Integer.parseInt(userLicenseNum));
                if(licenseResult == "good") {
                    UserLicense.setVisible(false);
                } else {
                    
                    String errorMsg = "An unknown error occured: " + licenseResult;
                    if(licenseResult == "Connection fail") errorMsg = "An internet connection is required \n"
                    + "in order to create your license";
                    if(licenseResult == "bad email") errorMsg = "The email address you have entered does \n"
                    + "does not match license records, please check it \n" 
                    + "has been entered correctly and try again.";
                    if(licenseResult == "bad access") errorMsg = "Could not write to your user directory \n"
                    + "contact your system administrator";
                    if(licenseResult == "bad user") errorMsg = "This license number is already activated \n"
                    + "for another user. Please contact the SammEE license \n"
                    + "team if you wish to reset the license.";           
                    if(licenseResult == "Bad License") errorMsg = "The license number you have entered is \n"
                    + "not valid, please try again.";
                    if(licenseResult == "software error") errorMsg = "A software error occured, please ensure \n"
                    + "you are running the latest version of SammEE.";
                    
                    infoBox(errorMsg, "LICENSE FAILED");
                    //System.exit(0);
                }
            } else {
                infoBox("You must agree to the user conditions \n"
                    + "and select a license type in order to \n"
                    + "generate a license and continue", "LICENSE FAILED");
            }
        }
    }//GEN-LAST:event_GetLicenseActionPerformed
    private void DeclineLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineLicenseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_DeclineLicenseActionPerformed
    private void licenseInputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseInputBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_licenseInputBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SammeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SammeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SammeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SammeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SammeeUI().setVisible(true);
            }
        
        });
        
    }
    private void setParaFile(Path path1){
        paramFile = path1;
        paramLabel.setText(paramFile.toString());
    }
    private void setOutputParams() {
        modelA.setOutput(inpOutCheck.isSelected(), tsOutCheck.isSelected(), summOutCheck.isSelected(), periodOutCheck.isSelected(), detailOutCheck.isSelected());
    }
    private void RunCheckVersion() {
        String verCheck = lic.checkControl();
        if(!"current".equals(verCheck)) {
            if("old".equals(verCheck)) {
                infoBox("This version of SammEE is now superceeded \n"
                    + "you need to upgrade to continue.", "OLD SOFTWARE");
                exitSammee();
            }
            if("connection error".equals(verCheck)) 
                infoBox("Connection to our server failed, so that \n"
                      + "we could not check to see if you have the\n"
                      + "latest version of this software. \n\n"
                      + "You can only run SammEE a limited number\n"
                      + "of times in 'offline mode' before you will \n"
                      + "be required to connect. \n" , "CONNECTION ERROR");
            if("update".equals(verCheck))
                infoBox("A new version of SammEE is available, we \n"
                      + "recommend that you upgrade to the latest \n"
                      + "version as soon as possible" , "OLD SOFTWARE");
        }
    }
    private void RunCheckLicense() {
        String licenseCheck = lic.checkLicense();
        licenseType = lic.getLicType();
        licenseNumber = lic.getNumber();
        currentVersion = lic.getVersion();
        
        if("Max Fails".equals(licenseCheck)) {
            infoBox("Connection to our server failed, on more than \n"
                    + "five (5) attempts, please ensure that a valid \n"
                    + "internet connection is available and try again. \n\n"
                    + "If this problem persists, please check to ensure \n"
                    + "you are running the latest version of SammEE.", "CONNECTION ERROR");
            exitSammee();
        }
        if("Connection fail".equals(licenseCheck)) {
            infoBox("We tried to check your license but the connection failed, \n"
                    + "if a license check fails more than (5) times then SammEE \n"
                    + "will stop working until you can connect. \n\n"
                    + "If this problem persists, please check to ensure \n"
                    + "you are running the latest version of SammEE.", "CONNECTION ERROR");
            licenseCheck = "Good";
        }
        if("new version".equals(licenseCheck)) {
            infoBox("We see that you have upgraded to the latest \n"
                    + "version of SammEE. Thankyou for your support, \n "
                    + "we hope that you enjoy the new features.", "NEW VERSION");
            licenseCheck = "Good";
        }
        if("software error".equals(licenseCheck)) {
            infoBox("We have detected an in SammEE's code please contact \n"
                    + "our team with your license details. So we can investigate, \n "
                    + "further.", "CONNECTION ERROR");
            licenseCheck = "Good";
        }
        if("upgrade".equals(licenseCheck)) {
            infoBox("Your license has been upgraded by our server. \n"
                    + "You are now running with a '" + licenseType + "' license \n"
                    + "Thankyou for your support, we hope you enjoy \n "
                    + "the new features.", "LICENSE CHANGE");
            licenseCheck = "Good";
        }
        if("expire changed".equals(licenseCheck)) {
            infoBox("Your license expiry date has been modified by \n"
                    + "our server. It will now expire on " + lic.getExpiry() + "\n"
                    + "if you have any concerns please contact us.", "LICENSE CHANGE");
            licenseCheck = "Good";
        }
        if(licenseType.equals("TRIAL")) {
            if("License Expired".equals(licenseCheck)) {
                infoBox("Your commercial 'TRIAL' license has expired. To purchase a \n"
                    + "full commercial license please contact us and quote your \n"
                    + "license number : " + licenseNumber, "TRIAL ENDED");
                exitSammee();
            }
            infoBox("Your commercial 'TRIAL' license will expire on " + lic.getExpiry() + " \n"
                    + "To purchase a full commercial license please contact us and \n"
                    + "quote your license number : " + licenseNumber, "TRIAL IN USE");
            licenseCheck = "Good";
        }
        if(!"Good".equals(licenseCheck)){
            if("Incorrect File".equals(licenseCheck)) licenseError.setText("License file incorrect format");
            if("Bad Version".equals(licenseCheck)) licenseError.setText("License found but not valid for current version");
            if("Bad License".equals(licenseCheck)) licenseError.setText("License number is invalid");
            if("License Expired".equals(licenseCheck)) licenseError.setText("License expired");
            if("Bad Email".equals(licenseCheck)) licenseError.setText("Invalid email found in license file");
            if("Missing File".equals(licenseCheck)) licenseError.setText("License file not found");
            if("Corrupt File".equals(licenseCheck)) licenseError.setText("License file corrupt");
            if("Bad User".equals(licenseCheck)) licenseError.setText("License found but not valid for current user");
            UserLicense.setLocationRelativeTo(null);
            UserLicense.setVisible(true);
        }
    }
    public static void infoBox(String messageText, String boxName) {
        JOptionPane.showMessageDialog(null, messageText, boxName, JOptionPane.INFORMATION_MESSAGE);
        }
    class sPARAfilefilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") || file.getAbsolutePath().endsWith(".sPara");
        }
        @Override
        public String getDescription() {
            return "SammEE parameter files (*.sPara)";
        }
    }
    class sRAINfilefilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") || file.getAbsolutePath().endsWith(".sRain");
        }
        @Override
        public String getDescription() {
            return "SammEE rainfall files (*.sRain)";
        }
    }
    class sSETUPfilefilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") || file.getAbsolutePath().endsWith(".sSetup");
        }
        @Override
        public String getDescription() {
            return "SammEE model setup files (*.sSetup)";
        }
    }
    class sOUTfilefilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") || file.getAbsolutePath().endsWith(".sOut");
        }
        @Override
        public String getDescription() {
            return "SammEE output files (*.sOut)";
        }
    }
   
    public void savePara() {  
        if(paraOutputOpen) writeParaFile.close();
        Calendar currentDate = Calendar.getInstance();
        
        try {
            String outputString = paramFile.toString();
            writeParaFile = new PrintWriter(new FileWriter(outputString));
            paraOutputOpen = true;
            
            writeParaFile.println("sammee-1d parameter file");
            writeParaFile.println("created using SammEE GUI v." + currentVersion);
            writeParaFile.println("license: " + licenseNumber);
            writeParaFile.println("date: " + dateStore.format(currentDate.getTime()));
            writeParaFile.println(".");
            writeParaFile.println("FILES");
            writeParaFile.println("setup file," + setupFile);
            writeParaFile.println("rain file," + rainFile);
            writeParaFile.println("output file," + outputFile);
            writeParaFile.println(".");
            writeParaFile.println("SETUP");
            if(checkInteger(setTimeStep.getText())) writeParaFile.println("timestep," + Integer.parseInt(setTimeStep.getText()));
            if(checkInteger(setNoTimesteps.getText())) writeParaFile.println("number timesteps," + Integer.parseInt(setNoTimesteps.getText()));
            if(checkFloat(setBoundConst1.getText()) && checkFloat(setBoundConst2.getText())) writeParaFile.println("bound const WL," + Float.parseFloat(setBoundConst1.getText()) + "," + Float.parseFloat(setBoundConst2.getText()));
            writeParaFile.println(".");
            writeParaFile.println("DEFAULT CELL PROPERTIES");
            if(checkFloat(setConstSY.getText())) writeParaFile.println("const SY," + Float.parseFloat(setConstSY.getText()));
            if(checkFloat(setConstK.getText())) writeParaFile.println("const K," + Float.parseFloat(setConstK.getText()));
            if(checkFloat(setConstIL.getText())) writeParaFile.println("const IL," + Float.parseFloat(setConstIL.getText()));
            if(checkFloat(setConstPL.getText())) writeParaFile.println("const PL," + Float.parseFloat(setConstPL.getText()));
            
            writeParaFile.close();
            paraOutputOpen = false;
        } catch (IOException ex) {
            Logger.getLogger(SAMmodel.class.getName()).log(Level.SEVERE, null, ex);
            System.out.print("could not open output file");
            infoBox("Could not save parameter file", "SAVE FAILED");
        }
    }
    public void clearSetup() {
        resetModel();
        outputFile = null;
        outputLabel.setText("----");
        rainFile = null;
        rainLabel.setText("----");
        setupFile = null;
        setupLabel.setText("----");
    }
    public void resetModel() {
        runStatus = false;
        paramRead = false;
        rainRead = false;
        setupRead = false;
        
        runStatusLabel.setText("MODEL NOT LOADED");
        runStatusLabel.setForeground(badColor);
        if(outputOpen) outputOpen = modelA.closeOutput();
        minWaterDepth.setText("-----");
        surfDrain.setText("-----");
        totalRain.setText("-----");
        totalIL.setText("-----");
        changeStorage.setText("-----");
        totalRunoff.setText("-----");
        totalFL.setText("-----");
        totalFR.setText("-----");
        waterBalance.setText("-----");
        
        TsLabel.setText("-----");
        mDuration.setText("-----");
        RsLabel.setText("-----");
        rDuration.setText("-----");
        cellsLabel.setText("-----");
        
        
        modelA = new SAMmodel();
        modelA.setOutput(inpOutCheck.isSelected(), tsOutCheck.isSelected(), summOutCheck.isSelected(), periodOutCheck.isSelected(), detailOutCheck.isSelected());
    }
    public void readPara() throws IOException {    
        Charset charset = Charset.forName("US-ASCII");
        try (BufferedReader reader = Files.newBufferedReader(paramFile, charset)) {
            String line;
            String[] lineArray;

            line = reader.readLine();
            lineArray = line.split(",");

            if (!lineArray[0].equals("sammee-1d parameter file")) {
                infoBox("Parameter file incorrect header", "LOAD FAILED");
                return;
            }

            int lineCount = 0;
            while (lineCount < 100) {
                lineCount++;
                if((line = reader.readLine()) != null){
                    lineArray = line.split(",");
                    if(lineArray.length == 0) continue;

                    if("setup file".equals(lineArray[0])) {
                        setupFile = Paths.get(lineArray[1]);
                        setupLabel.setText(setupFile.toString());
                    }
                    if("rain file".equals(lineArray[0])) {
                        rainFile = Paths.get(lineArray[1]);
                        rainLabel.setText(rainFile.toString());
                    }
                    if("output file".equals(lineArray[0])) {
                        outputFile = Paths.get(lineArray[1]);
                        outputLabel.setText(outputFile.toString());
                    }
                    
                    if("timestep".equals(lineArray[0])) setTimeStep.setText(String.valueOf(Integer.parseInt(lineArray[1]))); 
                    if("number timesteps".equals(lineArray[0])) setNoTimesteps.setText(String.valueOf(Integer.parseInt(lineArray[1])));
                    if("const SY".equals(lineArray[0])) setConstSY.setText(String.valueOf(Double.parseDouble(lineArray[1])));
                    if("const K".equals(lineArray[0])) setConstK.setText(String.valueOf(Double.parseDouble(lineArray[1])));
                    if("const IL".equals(lineArray[0])) setConstIL.setText(String.valueOf(Double.parseDouble(lineArray[1])));
                    if("const PL".equals(lineArray[0])) setConstPL.setText(String.valueOf(Double.parseDouble(lineArray[1])));
                    if("bound const WL".equals(lineArray[0])) {
                        setBoundConst1.setText(String.valueOf(Double.parseDouble(lineArray[1])));
                        setBoundConst2.setText(String.valueOf(Double.parseDouble(lineArray[2])));
                    }
                }
            }
        }
    }
    public void readFiles() {    
        Charset charset = Charset.forName("US-ASCII");
        runStatus = false;
        runStatusLabel.setText("SETUP INCOMPLETE");
        runStatusLabel.setForeground(badColor);
        if(outputOpen) outputOpen = modelA.closeOutput();

        // check for files are set
        if(outputFile == null) {
            infoBox("ERROR Output file not set", "LOAD FAILED");
            return; }
        if(setupFile == null) {
            infoBox("ERROR Setup file not set", "LOAD FAILED");
            return; }
        if(rainFile == null) {
            infoBox("ERROR Rainfall file not set", "LOAD FAILED");
            return; }

        outputOpen = modelA.iniOutput(outputFile);
        if(!outputOpen){
            infoBox("Failed to open output file", "LOAD FAILED");
            return;
        }
        
        try {
            paramRead = modelA.readParameterFile(paramFile);
            if(paramRead){
                setupRead = modelA.readSetupFile(setupFile);
                if(!setupRead){
                    infoBox(" Failed to read data from setup file \n refer to output file for details", "LOAD FAILED");
                    closeOutputFile();
                    return;
                }
                
                rainRead = modelA.readRainFile(rainFile);
                if(!rainRead){
                    infoBox(" Failed to read data from rainfall file \n refer to output file for details", "LOAD FAILED");
                    closeOutputFile();
                    return;
                }
            } else {
                infoBox(" Failed to read data from parameter file \n refer to output file for details", "LOAD FAILED");
                closeOutputFile();
                return;
            }
        } catch (IOException ex) {
            infoBox(" Failed to read data all input files \n refer to output file for details", "LOAD FAILED");
            Logger.getLogger(SammeeUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        if(rainRead && setupRead && paramRead) {
            runStatusLabel.setText("READY TO RUN");
            runStatusLabel.setForeground(Color.GREEN);

            int[] modelTimes = modelA.getTime();

            timeStep = modelTimes[0];
            TsLabel.setText(Integer.toString(timeStep));
            noTimesteps = modelTimes[1];
            mDuration.setText(String.format("%.1f",(float)(timeStep*noTimesteps/60/24)));
            RsLabel.setText(Integer.toString(modelTimes[2]));
            rDuration.setText(String.format("%.1f",(float)(modelTimes[2]*modelTimes[3]/60/24)));
        }

        if(paramRead && setupRead) {
            double[] bounds = modelA.getBounds();
            noCells = (int)bounds[0];
            maxY = bounds[1];
            minY = bounds[2];
            minX = bounds[3];
            maxX = bounds[4];
            cellsLabel.setText(Integer.toString(noCells));

            getModelResults(0);
            boundsPlot[0] = waterPlot[0];
            boundsPlot[1] = waterPlot[noCells+1];

            double[][] setupData = modelA.getSetup();
            for(int i = 0; i<noCells+2; i++) {
                cellPlot[i] = setupData[i][0]-minX;
                surfPlot[i] = setupData[i][1];
                impPlot[i] = setupData[i][2];
                xPlot[i] = setupData[i][3]-minX;
                maxWaterPlot[i] = waterPlot[i];
            }

            panel1.repaint();
        }
        
    }
    public void runModel() {
        if(runStatus) {
            resetModel();
            readFiles();
        }
        
        if(paramRead && setupRead && rainRead){
            runStatus = modelA.runModel();
                    
            Color goodColor = new Color(0,145,56);
            Color badColor = new Color(145,20,0);
            if(runStatus) {
                runCount = runCount + 1;
                double[] maxWater = modelA.getMaxWL();
                for(int c = 0; c<noCells+2; c++) maxWaterPlot[c] = maxWater[c];
                panel1.repaint();
                modelResult = modelA.getResult();
                runStatusLabel.setText("COMPLETE");
                runStatusLabel.setForeground(goodColor);
                minWaterDepth.setText(String.format("%s",Math.round(modelResult[0]*1000)));
                changeStorage.setText(String.format("%s",(int)modelResult[1]));
                totalRain.setText(String.format("%s",(int)modelResult[2]));
                totalIL.setText(String.format("%s",(int)modelResult[3]));
                totalRunoff.setText(String.format("%s",(int)modelResult[4]));
                totalFL.setText(String.format("%s",(int)modelResult[5]));
                totalFR.setText(String.format("%s",(int)modelResult[6]));
                surfDrain.setText(String.format("%s",(int)modelResult[7]));
                waterBalance.setText(String.format("%s",(int)(modelResult[2]-modelResult[1]-modelResult[3]-modelResult[4]-modelResult[5]-modelResult[6]-modelResult[7])));
            } else {
                runStatusLabel.setText("ERROR");
                runStatusLabel.setForeground(badColor);
            }
            closeOutputFile();
        }
    }
    private void iniAnimate(){
        animateTimer = new Timer (frameDelay, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                animateWL(e);
            }
        });
    }
    private void exitSammee() {
        closeOutputFile();
        System.exit(0);
    }
    private void closeOutputFile() {
        outputOpen = modelA.closeOutput();
    }
    private void animateWL(ActionEvent e) {
        if(animateTS<noTimesteps-1 && animateRun){
            animateTS++;
            int TSpercent = (int)(100*animateTS/noTimesteps);
            TsSlider.setValue(TSpercent);
            currentTsLabel.setText(String.format("%s",animateTS));
            showTimeLabel.setText(String.format("%s",animateTS*timeStep/60/24));
            
            getModelResults(animateTS);
            panel1.repaint();
        }
    }
    private void getModelResults(int i){
            double[] TsResult = modelA.getTimeStepWL(i);
            for(int c = 0; c<noCells+2; c++) waterPlot[c] = TsResult[c];
            
            if(runStatus) {
                double[] TsFluxResult = modelA.getTimeStepResult(i);
                TsRainfall.setText(String.format("%.2f",(float)(TsFluxResult[0]*60/timeStep)));
                TsFlux.setText(String.format("%.2f",(float)((TsFluxResult[3]+TsFluxResult[4])/timeStep)));
            }  
    }
    class chartPanel extends JPanel {
            
        public chartPanel() {
            setBorder(BorderFactory.createLineBorder(Color.black));
        }

        // @Override
        // public Dimension getPreferredSize() {
        //    return new Dimension(250,200);
        // }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            
            // Draw axis
            int xlength = 720;
            int yHeight = 120;
            g2.setStroke(new BasicStroke(2));
            g2.draw(new Line2D.Double(48,20,48,yHeight+22)); // LH vertical axis
            g2.draw(new Line2D.Double(52+xlength,20,52+xlength,yHeight+22)); // RH vertical axis
            g2.draw(new Line2D.Double(48,yHeight+22,50+xlength,yHeight+22)); // horisontal axis
            g2.draw(new Line2D.Double(50,yHeight+22,50,yHeight+25)); // origin tick
            g.drawString(Double.toString(maxY), 10, 25); // max y label
            g.drawString(Double.toString(minY), 10, yHeight+24); // max y label
            g.drawString("0", 47, yHeight+40); // 0 x label
            g.drawString(Double.toString(maxX-minX), 40+xlength, yHeight+40); // max x label
            
            // Draw legend
            int legendX = 70;
            int legendY = 30;
            Color surfColor = new Color(153,204,0);
            Color impColor = new Color(204,102,0);
            Color wlColor = new Color(51,204,215);
            Color maxColor = new Color(153,51,255);
            
            g2.setStroke(new BasicStroke(2));
            g.setColor(Color.BLACK);
            g.setFont(new Font("default", Font.BOLD,11));
            g.drawString("LEGEND", legendX+xlength, legendY); // Legend label
            g.setFont(new Font("default", Font.PLAIN,11));
            g.drawString("Water level", legendX+xlength+10, legendY+5+1*15); 
            g.drawString("boundary", legendX+xlength+20, legendY+5+2*15); 
            g.drawString("current TS", legendX+xlength+20, legendY+5+3*15);
            g.drawString("maximum", legendX+xlength+20, legendY+5+4*15);
            g.drawString("Surface", legendX+xlength+10, legendY+8+5*15); 
            g.drawString("Impervious", legendX+xlength+10, legendY+10+6*15);
            g.setColor(Color.RED);
            g.fillRect(legendX+xlength+110,legendY-2+2*15, 6, 6);
            g.setColor(wlColor);
            g.drawLine(legendX+xlength+100,legendY+1+3*15,legendX+xlength+130,legendY+1+3*15);
            g.setColor(maxColor);
            g.drawLine(legendX+xlength+100,legendY+1+4*15,legendX+xlength+130,legendY+1+4*15);
            g.setColor(surfColor);
            g.drawLine(legendX+xlength+100,legendY+3+5*15,legendX+xlength+130,legendY+3+5*15);
            g.setColor(impColor);
            g.drawLine(legendX+xlength+100,legendY+5+6*15,legendX+xlength+130,legendY+5+6*15);
            
            
            // Chart plot
            double yMultip = yHeight / (maxY-minY);
            double xMultip = xlength / (maxX-minX);
            
            int x1, x2;
            int cx1, cx2, cy;
            int y1, y2;
            
            for(int i = 1; i<=noCells+1; i++) {
                x1 = (int)Math.round(cellPlot[i-1]*xMultip+50);
                x2 = (int)Math.round(cellPlot[i]*xMultip+50);
                g.setColor(Color.BLACK);
                g2.setStroke(new BasicStroke(2));
                g.drawLine(x2,yHeight+25,x2,yHeight+22); // point tick axis
                
                // draw Surface layer
                y1 = (int)Math.round(yHeight+20-(surfPlot[i-1]-minY)*yMultip);
                y2 = (int)Math.round(yHeight+20-(surfPlot[i]-minY)*yMultip);
                cx1 = (int)Math.round(xPlot[i-1]*xMultip+50);
                cx2 = (int)Math.round(xPlot[i]*xMultip+50);
                
                g2.setStroke(new BasicStroke(2));
                g.setColor(surfColor);
                if(lineSurf) {
                    g.drawLine(x1,y1,x2,y2);
                    cy = (int)((y1+y2)/2);
                } else {
                    if(i < noCells + 1) g.drawLine(cx1,y2,cx2,y2);
                    cy = (int)(Math.max(y1,y2)+1);
                    g.drawLine(cx1,y2,cx1,y1);
                }
                if(i < noCells + 1) g.drawLine(x2,y2+2,x2,y2-2);
                
                if(drawCells) {
                    g.setColor(Color.GRAY);
                    g2.setStroke(new BasicStroke(1));
                    if(i>1 && i<noCells+1) g.drawLine(cx1,yHeight+22,cx1,cy);
                }
                g2.setStroke(new BasicStroke(2));
                
                // draw Imp layer
                y1 = (int)Math.round(yHeight+20-(impPlot[i-1]-minY)*yMultip);
                y2 = (int)Math.round(yHeight+20-(impPlot[i]-minY)*yMultip);
                g.setColor(impColor);
                g.drawLine(x1,y1,x2,y2);
                if(i==1){
                    g.drawLine(x1,y1+2,x1,y1-2);
                } 
                g.drawLine(x2,y2+2,x2,y2-2);
                    
                // draw max WL
                y1 = (int)Math.round(yHeight+20-(maxWaterPlot[i-1]-minY)*yMultip);
                y2 = (int)Math.round(yHeight+20-(maxWaterPlot[i]-minY)*yMultip);
                g.setColor(maxColor);
                g.drawLine(x1,y1,x2,y2); 
                g.drawLine(x2,y2+2,x2,y2-2);
                if(i==1){
                    g.drawLine(x1,y1+2,x1,y1-2);
                }
                // draw WL
                y1 = (int)Math.round(yHeight+20-(waterPlot[i-1]-minY)*yMultip);
                y2 = (int)Math.round(yHeight+20-(waterPlot[i]-minY)*yMultip);
                g.setColor(wlColor);
                g.drawLine(x1,y1,x2,y2); 
                g.drawLine(x2,y2+2,x2,y2-2);
                if(i==1){
                    g.drawLine(x1,y1+2,x1,y1-2);
                }
                
            }
            
            // draw boundary conditions
            x1 = 50;
            x2 = 50+xlength;
            
            if(minY == 0 && maxY == 0){
                y1 = yHeight+20;
                y2 = yHeight+20;
            } else {
                y1 = (int)Math.round(yHeight+20-(boundsPlot[0]-minY)*yMultip);
                y2 = (int)Math.round(yHeight+20-(boundsPlot[1]-minY)*yMultip);
            }
            
            g.setColor(Color.RED);
            g.fillRect(x1-3,y1-3, 6, 6);
            g.fillRect(x2-3,y2-3, 6, 6);
            
        }  
    }
    
    public static boolean checkInteger(String value) {
        if(value == null || value.isEmpty()) {
            return false;
        }

        try {
            int tryParse = Integer.parseInt(value);
            return true;
        }
        catch (NumberFormatException e) {
        }
        return false;
    }
    public static boolean checkDouble(String value) {
        if(value == null || value.isEmpty()) {
            return false;
        }

        try {
            Double tryParse = Double.parseDouble(value);
            return true;
        }
        catch (NumberFormatException e) {
        }
        return false;
    }
    public static boolean checkFloat(String value) {
        if(value == null || value.isEmpty()) {
            return false;
        }

        try {
            float tryParse = Float.parseFloat(value);
            return true;
        }
        catch (NumberFormatException e) {
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Animation_Panel;
    private javax.swing.JButton DeclineLicense;
    private javax.swing.JButton GetLicense;
    private javax.swing.JPanel Result_Panel;
    private javax.swing.JLabel RsLabel;
    private javax.swing.JLabel TsFlux;
    private javax.swing.JLabel TsLabel;
    private javax.swing.JLabel TsRainfall;
    private javax.swing.JSlider TsSlider;
    private javax.swing.JDialog UserLicense;
    private javax.swing.JCheckBox agreeCheckBox;
    private javax.swing.JButton cancelParamSetup;
    private javax.swing.JLabel cellsLabel;
    private javax.swing.JCheckBox cellsON;
    private javax.swing.JLabel changeStorage;
    private javax.swing.JLabel currentTsLabel;
    private javax.swing.JCheckBox detailOutCheck;
    private javax.swing.JTextField emailInputBox;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JFileChooser fileChooser_sOUT;
    private javax.swing.JFileChooser fileChooser_sPARA;
    private javax.swing.JFileChooser fileChooser_sRAIN;
    private javax.swing.JFileChooser fileChooser_sSETUP;
    private javax.swing.JFileChooser fileSave_sPARA;
    private javax.swing.JButton findOutput;
    private javax.swing.JButton findRainfall;
    private javax.swing.JButton findSetup;
    private javax.swing.JButton goButton;
    private javax.swing.JCheckBox inpOutCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel licenseError;
    private javax.swing.JTextField licenseInputBox;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel mDuration;
    private javax.swing.JLabel minWaterDepth;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JPanel panel1;
    private javax.swing.JLabel paramLabel;
    private javax.swing.JFrame paramSetup;
    private javax.swing.JButton pauseButton;
    private javax.swing.JCheckBox periodOutCheck;
    private javax.swing.JLabel rDuration;
    private javax.swing.JLabel rainLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox runOnSaveCheck;
    private javax.swing.JLabel runStatusLabel;
    private javax.swing.JButton saveParamSetup;
    private javax.swing.JFormattedTextField setBoundConst1;
    private javax.swing.JFormattedTextField setBoundConst2;
    private javax.swing.JFormattedTextField setConstIL;
    private javax.swing.JFormattedTextField setConstK;
    private javax.swing.JFormattedTextField setConstPL;
    private javax.swing.JFormattedTextField setConstSY;
    private javax.swing.JFormattedTextField setNoTimesteps;
    private javax.swing.JFormattedTextField setTimeStep;
    private javax.swing.JLabel setupLabel;
    private javax.swing.JLabel showTimeLabel;
    private javax.swing.JSlider speed;
    private javax.swing.JCheckBox summOutCheck;
    private javax.swing.JLabel surfDrain;
    private javax.swing.JCheckBox surfType;
    private javax.swing.JLabel totalFL;
    private javax.swing.JLabel totalFR;
    private javax.swing.JLabel totalIL;
    private javax.swing.JLabel totalRain;
    private javax.swing.JLabel totalRunoff;
    private javax.swing.JCheckBox tsOutCheck;
    private javax.swing.JLabel waterBalance;
    // End of variables declaration//GEN-END:variables
}
